CMAKE_MINIMUM_REQUIRED (VERSION 2.8)
PROJECT(COM)

ENABLE_LANGUAGE( CXX Fortran )

IF(NOT ENABLE_MPI)
  ADD_DEFINITIONS( -DDUMMY_MPI )
ELSE()
  FIND_PACKAGE(MPI REQUIRED)
  ADD_DEFINITIONS( -DMPICH_IGNORE_CXX_SEEK )
  INCLUDE_DIRECTORIES(${MPI_INCLUDE_PATH})
ENDIF()

INCLUDE(FortranCInterface)
FortranCInterface_HEADER(${CMAKE_BINARY_DIR}/include/FC.h MACRO_NAMESPACE "FC_")
FortranCInterface_VERIFY(CXX QUIET)
SET (BUILD_STATIC FALSE CACHE BOOL "Build static COM library")
SET (ENABLE_MPI TRUE CACHE BOOL "Build with MPI Support")
SET (EXECUTABLE_OUTPUT_PATH ${PROJECT_BINARY_DIR}/bin CACHE PATH "Single directory for all executables.")
SET (LIBRARY_OUTPUT_PATH ${PROJECT_BINARY_DIR}/lib CACHE PATH "Single directory for all libraries and archives.")
MARK_AS_ADVANCED (LIBRARY_OUTPUT_PATH EXECUTABLE_OUTPUT_PATH)

IF(APPLE)
	ADD_DEFINITIONS(-DDARWIN)
ELSEIF (WIN32)
	ADD_DEFINITIONS(-DWIN32)
ENDIF()

IF (UNIX)
	FIND_LIBRARY(DL_LIB dl)
ENDIF()

SET (LIB_SRCS src/com_c.C src/assertion.C src/com_exception.C src/commpi.C src/COM_base.C src/DataItem.C src/Connectivity.C src/ComponentInterface.C src/Pane.C src/Element_accessors.C)
SET_SOURCE_FILES_PROPERTIES(${LIB_SRCS} src/com_f.C PROPERTIES COMPILE_FLAGS "${MPI_CXX_COMPILE_FLAGS}")
IF (UNIX)
	SET (FLIB_SRCS src/com_f.C src/m_pointers.f90 src/utilities.f90)
ELSE ()
	SET (FLIB_SRCS src/com_f.C)
	SET (FLIB2_SRCS src/m_pointers.f90 src/utilities.f90)
ENDIF()
SET_SOURCE_FILES_PROPERTIES(src/m_pointers.f90 src/utilities.f90 PROPERTIES COMPILE_FLAGS "${MPI_Fortran_COMPILE_FLAGS}")
SET (ALL_SRCS "${LIB_SRCS} ${FLIB_SRCS}" )
SET_SOURCE_FILES_PROPERTIES(${ALL_SRCS} PROPERTIES COMPILE_FLAGS "-fPIC" )

# rpath settings
SET(CMAKE_INSTALL_RPATH "${CMAKE_INSTALL_PREFIX}/lib")
SET(CMAKE_INSTALL_RPATH_USE_LINK_PATH TRUE)

INCLUDE_DIRECTORIES(include ${CMAKE_BINARY_DIR}/include)

# Building dynamic libs
# For win32 we need static libs
IF(NOT BUILD_STATIC AND UNIX)
  ADD_LIBRARY(SITCOM SHARED ${LIB_SRCS})
  ADD_LIBRARY(SITCOMF SHARED ${FLIB_SRCS})
ELSE ()
  ADD_LIBRARY(SITCOM STATIC ${LIB_SRCS})
  ADD_LIBRARY(SITCOMF STATIC ${FLIB_SRCS})
  ADD_LIBRARY(SITCOMF2 STATIC ${FLIB2_SRCS})
  ADD_DEFINITIONS( -DSTATIC_LINK )
ENDIF()
IF(UNIX)
	TARGET_LINK_LIBRARIES(SITCOM ${DL_LIB} ${MPI_CXX_LIBRARIES})
	TARGET_LINK_LIBRARIES(SITCOMF SITCOM ${MPI_Fortran_LIBRARIES})	
	SET_TARGET_PROPERTIES(SITCOM PROPERTIES LINK_FLAGS "${MPI_CXX_LINK_FLAGS}")
	SET_TARGET_PROPERTIES(SITCOMF PROPERTIES LINK_FLAGS "${MPI_CXX_LINK_FLAGS}")
ELSE()
	TARGET_LINK_LIBRARIES(SITCOM ${MPI_CXX_LIBRARIES})
	TARGET_LINK_LIBRARIES(SITCOMF SITCOM ${MPI_Fortran_LIBRARIES})
	TARGET_LINK_LIBRARIES(SITCOMF2 SITCOM ${MPI_Fortran_LIBRARIES})
	SET_TARGET_PROPERTIES(SITCOM PROPERTIES LINK_FLAGS "${MPI_CXX_LINK_FLAGS}")
	SET_TARGET_PROPERTIES(SITCOMF PROPERTIES LINK_FLAGS "${MPI_CXX_LINK_FLAGS}")
	SET_TARGET_PROPERTIES(SITCOMF2 PROPERTIES LINK_FLAGS "${MPI_CXX_LINK_FLAGS}")
ENDIF()

IF (UNIX)
	ADD_SUBDIRECTORY(testing)
ENDIF ()

FILE(GLOB H_FILES include/*.H)
FILE(GLOB h_FILES include/*.h)
FILE(GLOB hpp_FILES include/*.hpp)
SET(COM_INC_FILES ${H_FILES} ${h_FILES} ${hpp_FILES})
 
INSTALL(FILES ${COM_INC_FILES} DESTINATION include)
INSTALL(FILES ${CMAKE_BINARY_DIR}/include/FC.h DESTINATION include)
INSTALL(TARGETS SITCOM SITCOMF SITCOMF2 RUNTIME DESTINATION bin LIBRARY DESTINATION lib ARCHIVE DESTINATION lib)
